// Comprehensive Google Authentication System Test
// This script tests both SANDBOX and PRODUCTION modes of the Google Auth system

import React from 'react';
import { View, Text, TouchableOpacity, ScrollView, Alert } from 'react-native';
import config from './app/constants/config';
import { googleAuthDebugger, authModeManager, SANDBOX_USERS } from './app/constants/googleAuthUtils';
import useGoogleAuth from './app/hooks/useGoogleAuth';

const GoogleAuthTestSuite = () => {
  const {
    signInWithGoogle,
    loginWithGoogle,
    checkUserExists,
    isLoading,
    currentMode,
    isSandboxMode,
    isProductionMode,
    switchToSandboxMode,
    switchToProductionMode,
    getDebugLogs,
    exportDebugLogs,
    clearDebugLogs,
    isFirebaseAuthAvailable,
    sandboxUsers,
  } = useGoogleAuth();

  const [testResults, setTestResults] = React.useState([]);
  const [isRunningTests, setIsRunningTests] = React.useState(false);

  const addTestResult = (testName, status, details = '') => {
    const result = {
      testName,
      status, // 'PASS', 'FAIL', 'SKIP'
      details,
      timestamp: new Date().toISOString(),
    };
    setTestResults(prev => [...prev, result]);
    console.log(`[TEST] ${testName}: ${status} - ${details}`);
  };

  const runComprehensiveTests = async () => {
    setIsRunningTests(true);
    setTestResults([]);
    clearDebugLogs();

    try {
      // Test 1: Configuration Test
      await testConfiguration();
      
      // Test 2: Sandbox Mode Tests
      await testSandboxMode();
      
      // Test 3: Production Mode Tests (if available)
      await testProductionMode();
      
      // Test 4: Mode Switching Tests
      await testModeSwitching();
      
      // Test 5: Error Handling Tests
      await testErrorHandling();
      
      // Test 6: Debug System Tests
      await testDebugSystem();

      addTestResult('COMPREHENSIVE_TEST', 'PASS', 'All tests completed');
      
    } catch (error) {
      addTestResult('COMPREHENSIVE_TEST', 'FAIL', `Test suite failed: ${error.message}`);
    } finally {
      setIsRunningTests(false);
    }
  };

  const testConfiguration = async () => {
    try {
      // Test config values
      const hasGoogleAuthMode = config.GOOGLE_AUTH_MODE;
      const hasDebugFlag = typeof config.DEBUG_GOOGLE_AUTH === 'boolean';
      
      if (!hasGoogleAuthMode) {
        addTestResult('CONFIG_GOOGLE_AUTH_MODE', 'FAIL', 'GOOGLE_AUTH_MODE not configured');
        return;
      }
      
      if (!['SANDBOX', 'PRODUCTION'].includes(config.GOOGLE_AUTH_MODE)) {
        addTestResult('CONFIG_GOOGLE_AUTH_MODE_VALUE', 'FAIL', `Invalid mode: ${config.GOOGLE_AUTH_MODE}`);
        return;
      }
      
      if (!hasDebugFlag) {
        addTestResult('CONFIG_DEBUG_FLAG', 'FAIL', 'DEBUG_GOOGLE_AUTH not configured');
        return;
      }

      addTestResult('CONFIG_VALIDATION', 'PASS', `Mode: ${config.GOOGLE_AUTH_MODE}, Debug: ${config.DEBUG_GOOGLE_AUTH}`);
      
      // Test sandbox users
      if (SANDBOX_USERS && SANDBOX_USERS.length > 0) {
        const validUser = SANDBOX_USERS[0];
        const hasRequiredFields = validUser.id && validUser.email && validUser.name;
        
        if (hasRequiredFields) {
          addTestResult('SANDBOX_USERS_CONFIG', 'PASS', `${SANDBOX_USERS.length} sandbox users configured`);
        } else {
          addTestResult('SANDBOX_USERS_CONFIG', 'FAIL', 'Sandbox users missing required fields');
        }
      } else {
        addTestResult('SANDBOX_USERS_CONFIG', 'FAIL', 'No sandbox users configured');
      }
      
    } catch (error) {
      addTestResult('CONFIG_VALIDATION', 'FAIL', error.message);
    }
  };

  const testSandboxMode = async () => {
    try {
      // Switch to sandbox mode
      switchToSandboxMode();
      await new Promise(resolve => setTimeout(resolve, 100)); // Allow state update
      
      if (!isSandboxMode) {
        addTestResult('SANDBOX_MODE_SWITCH', 'FAIL', 'Failed to switch to sandbox mode');
        return;
      }
      
      addTestResult('SANDBOX_MODE_SWITCH', 'PASS', 'Successfully switched to sandbox mode');
      
      // Test sandbox sign-in
      const signInResult = await signInWithGoogle();
      
      if (signInResult.success && signInResult.isSandbox) {
        addTestResult('SANDBOX_SIGNIN', 'PASS', `Signed in as: ${signInResult.userInfo.email}`);
        
        // Test sandbox login
        const loginResult = await loginWithGoogle(signInResult.userInfo);
        
        if (loginResult.success && loginResult.isSandbox) {
          addTestResult('SANDBOX_LOGIN', 'PASS', `Login successful with token: ${loginResult.token?.substring(0, 10)}...`);
        } else {
          addTestResult('SANDBOX_LOGIN', 'FAIL', loginResult.error || 'Login failed');
        }
        
        // Test user existence check
        const userCheck = await checkUserExists(signInResult.userInfo.email, signInResult.userInfo.id);
        
        if (userCheck.success) {
          addTestResult('SANDBOX_USER_CHECK', 'PASS', `User exists: ${userCheck.exists}`);
        } else {
          addTestResult('SANDBOX_USER_CHECK', 'FAIL', userCheck.error || 'User check failed');
        }
        
      } else {
        addTestResult('SANDBOX_SIGNIN', 'FAIL', signInResult.error || 'Sandbox sign-in failed');
      }
      
    } catch (error) {
      addTestResult('SANDBOX_MODE_TEST', 'FAIL', error.message);
    }
  };

  const testProductionMode = async () => {
    try {
      // Switch to production mode
      switchToProductionMode();
      await new Promise(resolve => setTimeout(resolve, 100)); // Allow state update
      
      if (!isProductionMode) {
        addTestResult('PRODUCTION_MODE_SWITCH', 'FAIL', 'Failed to switch to production mode');
        return;
      }
      
      addTestResult('PRODUCTION_MODE_SWITCH', 'PASS', 'Successfully switched to production mode');
      
      // Check Firebase availability
      if (!isFirebaseAuthAvailable) {
        addTestResult('FIREBASE_AVAILABILITY', 'SKIP', 'Firebase Auth not available (Expo Go detected)');
        addTestResult('PRODUCTION_SIGNIN', 'SKIP', 'Production sign-in requires development build');
        return;
      }
      
      addTestResult('FIREBASE_AVAILABILITY', 'PASS', 'Firebase Auth is available');
      
      // Note: We can't automatically test production sign-in without user interaction
      // This would require actual Google authentication popup
      addTestResult('PRODUCTION_SIGNIN', 'SKIP', 'Production sign-in requires user interaction (manual test)');
      
      // Test API endpoints availability
      try {
        const response = await fetch(`${config.API_URL}/buyer/check-google-user`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            email: 'test@example.com',
            googleId: 'test123',
            timestamp: new Date().toISOString()
          }),
        });
        
        if (response.status === 404 || response.status === 200) {
          addTestResult('BACKEND_API_AVAILABILITY', 'PASS', `API responded with status: ${response.status}`);
        } else {
          addTestResult('BACKEND_API_AVAILABILITY', 'FAIL', `Unexpected API status: ${response.status}`);
        }
        
      } catch (error) {
        addTestResult('BACKEND_API_AVAILABILITY', 'FAIL', `API not reachable: ${error.message}`);
      }
      
    } catch (error) {
      addTestResult('PRODUCTION_MODE_TEST', 'FAIL', error.message);
    }
  };

  const testModeSwitching = async () => {
    try {
      const initialMode = currentMode;
      
      // Test switching between modes
      switchToSandboxMode();
      await new Promise(resolve => setTimeout(resolve, 100));
      
      if (currentMode === 'SANDBOX') {
        addTestResult('MODE_SWITCH_TO_SANDBOX', 'PASS', 'Successfully switched to SANDBOX');
      } else {
        addTestResult('MODE_SWITCH_TO_SANDBOX', 'FAIL', `Expected SANDBOX, got ${currentMode}`);
      }
      
      switchToProductionMode();
      await new Promise(resolve => setTimeout(resolve, 100));
      
      if (currentMode === 'PRODUCTION') {
        addTestResult('MODE_SWITCH_TO_PRODUCTION', 'PASS', 'Successfully switched to PRODUCTION');
      } else {
        addTestResult('MODE_SWITCH_TO_PRODUCTION', 'FAIL', `Expected PRODUCTION, got ${currentMode}`);
      }
      
      // Reset to initial mode
      if (initialMode === 'SANDBOX') {
        switchToSandboxMode();
      } else {
        switchToProductionMode();
      }
      
    } catch (error) {
      addTestResult('MODE_SWITCHING', 'FAIL', error.message);
    }
  };

  const testErrorHandling = async () => {
    try {
      // Test with invalid data
      switchToSandboxMode();
      
      const invalidLoginResult = await loginWithGoogle({
        email: 'invalid@nonexistent.com',
        id: 'invalid123',
        name: 'Invalid User'
      });
      
      if (!invalidLoginResult.success) {
        addTestResult('ERROR_HANDLING_INVALID_USER', 'PASS', 'Correctly handled invalid user');
      } else {
        addTestResult('ERROR_HANDLING_INVALID_USER', 'FAIL', 'Should have failed with invalid user');
      }
      
      // Test user existence with invalid email
      const invalidUserCheck = await checkUserExists('nonexistent@invalid.com', 'invalid123');
      
      if (invalidUserCheck.success && !invalidUserCheck.exists) {
        addTestResult('ERROR_HANDLING_USER_CHECK', 'PASS', 'Correctly handled non-existent user check');
      } else {
        addTestResult('ERROR_HANDLING_USER_CHECK', 'FAIL', 'User check error handling failed');
      }
      
    } catch (error) {
      addTestResult('ERROR_HANDLING', 'FAIL', error.message);
    }
  };

  const testDebugSystem = async () => {
    try {
      clearDebugLogs();
      
      // Generate some debug entries
      googleAuthDebugger.info('Test debug message', { testData: 'value' });
      googleAuthDebugger.warn('Test warning message');
      googleAuthDebugger.error('Test error message', { errorCode: 'TEST_ERROR' });
      
      const logs = getDebugLogs();
      
      if (logs && logs.length >= 3) {
        addTestResult('DEBUG_LOGGING', 'PASS', `Generated ${logs.length} debug entries`);
      } else {
        addTestResult('DEBUG_LOGGING', 'FAIL', `Expected at least 3 logs, got ${logs?.length || 0}`);
      }
      
      // Test export functionality
      const exportedLogs = exportDebugLogs();
      
      if (exportedLogs && typeof exportedLogs === 'string' && exportedLogs.length > 0) {
        addTestResult('DEBUG_EXPORT', 'PASS', `Exported ${exportedLogs.length} characters of log data`);
      } else {
        addTestResult('DEBUG_EXPORT', 'FAIL', 'Failed to export debug logs');
      }
      
      // Test clear functionality
      clearDebugLogs();
      const clearedLogs = getDebugLogs();
      
      if (clearedLogs && clearedLogs.length === 0) {
        addTestResult('DEBUG_CLEAR', 'PASS', 'Successfully cleared debug logs');
      } else {
        addTestResult('DEBUG_CLEAR', 'FAIL', `Expected 0 logs after clear, got ${clearedLogs?.length || 'unknown'}`);
      }
      
    } catch (error) {
      addTestResult('DEBUG_SYSTEM', 'FAIL', error.message);
    }
  };

  const renderTestResults = () => {
    const passCount = testResults.filter(r => r.status === 'PASS').length;
    const failCount = testResults.filter(r => r.status === 'FAIL').length;
    const skipCount = testResults.filter(r => r.status === 'SKIP').length;

    return (
      <View style={{ padding: 20 }}>
        <Text style={{ fontSize: 18, fontWeight: 'bold', marginBottom: 10 }}>
          Test Results: {passCount} PASS, {failCount} FAIL, {skipCount} SKIP
        </Text>
        
        <ScrollView style={{ maxHeight: 400, backgroundColor: '#f5f5f5', padding: 10 }}>
          {testResults.map((result, index) => (
            <View key={index} style={{ 
              marginBottom: 8, 
              padding: 8, 
              backgroundColor: result.status === 'PASS' ? '#d4edda' : 
                               result.status === 'FAIL' ? '#f8d7da' : '#fff3cd',
              borderRadius: 4 
            }}>
              <Text style={{ fontWeight: 'bold' }}>
                [{result.status}] {result.testName}
              </Text>
              {result.details && (
                <Text style={{ fontSize: 12, marginTop: 4 }}>
                  {result.details}
                </Text>
              )}
            </View>
          ))}
        </ScrollView>
      </View>
    );
  };

  return (
    <ScrollView style={{ flex: 1, padding: 20 }}>
      <Text style={{ fontSize: 24, fontWeight: 'bold', marginBottom: 20 }}>
        Google Auth Test Suite
      </Text>
      
      <View style={{ marginBottom: 20 }}>
        <Text>Current Mode: <Text style={{ fontWeight: 'bold' }}>{currentMode}</Text></Text>
        <Text>Is Loading: {isLoading ? 'Yes' : 'No'}</Text>
        <Text>Firebase Available: {isFirebaseAuthAvailable ? 'Yes' : 'No'}</Text>
        <Text>Sandbox Users: {sandboxUsers?.length || 0}</Text>
      </View>
      
      <TouchableOpacity
        style={{
          backgroundColor: isRunningTests ? '#6c757d' : '#007bff',
          padding: 15,
          borderRadius: 8,
          alignItems: 'center',
          marginBottom: 20,
        }}
        onPress={runComprehensiveTests}
        disabled={isRunningTests}
      >
        <Text style={{ color: 'white', fontSize: 16, fontWeight: 'bold' }}>
          {isRunningTests ? 'Running Tests...' : 'Run Comprehensive Tests'}
        </Text>
      </TouchableOpacity>
      
      {testResults.length > 0 && renderTestResults()}
      
      {/* Debug Controls */}
      <View style={{ marginTop: 20 }}>
        <Text style={{ fontSize: 18, fontWeight: 'bold', marginBottom: 10 }}>
          Debug Controls
        </Text>
        
        <TouchableOpacity
          style={{ backgroundColor: '#28a745', padding: 10, borderRadius: 5, marginBottom: 10 }}
          onPress={() => {
            const logs = getDebugLogs();
            Alert.alert('Debug Logs', `Found ${logs.length} log entries`);
          }}
        >
          <Text style={{ color: 'white', textAlign: 'center' }}>View Debug Logs</Text>
        </TouchableOpacity>
        
        <TouchableOpacity
          style={{ backgroundColor: '#ffc107', padding: 10, borderRadius: 5, marginBottom: 10 }}
          onPress={() => {
            const exported = exportDebugLogs();
            console.log('Exported Debug Logs:', exported);
            Alert.alert('Debug Logs Exported', 'Check console for full log data');
          }}
        >
          <Text style={{ color: 'black', textAlign: 'center' }}>Export Debug Logs</Text>
        </TouchableOpacity>
        
        <TouchableOpacity
          style={{ backgroundColor: '#dc3545', padding: 10, borderRadius: 5 }}
          onPress={() => {
            clearDebugLogs();
            Alert.alert('Debug Logs Cleared', 'All debug logs have been cleared');
          }}
        >
          <Text style={{ color: 'white', textAlign: 'center' }}>Clear Debug Logs</Text>
        </TouchableOpacity>
      </View>
    </ScrollView>
  );
};

export default GoogleAuthTestSuite;
